{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(imager)\nlibrary(jpeg)\n\n# Define UI for application that draws a histogram\nui <- navbarPage(title=\"Photo tool\",\n                   \n  tabPanel(\"Decolorize\", \n           tags$head(\n             tags$link(rel = \"stylesheet\", type = \"text/css\", href = \"style.css\")\n           ),\n           # includeCSS(\"www/style.css\"),            \n   sidebarLayout(\n      sidebarPanel(\n         fileInput(\"myFile\",\n                     \"Please upload your beautiful photo\", accept = c('image/png', 'image/jpeg')),\n         uiOutput(\"heigh\"),\n         actionButton(\"Black\", \"Make picture black and white\"),\n         \n         uiOutput(\"R.col\"),\n         uiOutput(\"G.col\"),\n         uiOutput(\"B.col\"),\n         actionButton(\"refresh\", \"Refresh\")\n      ),\n      \n      mainPanel(\n        \n        fluidRow( splitLayout(cellWidths = c(\"50%\", \"50%\"), \n        uiOutput(\"myImage\"), \n        uiOutput(\"plot.black\")\n        )\n      ))\n   )\n  ),\n  \n  tabPanel(\"Decomposition of colours\", \n           \n           sidebarLayout(\n             sidebarPanel(\n               fileInput(\"myFile2\",\n                         \"Please upload your beautiful photo\", accept = c('image/png', 'image/jpeg')),\n               uiOutput(\"heigh2\"),\n               \n               actionButton(\"Decomposition\", \"Show the decomposition of colours of the photograph\"),\n               uiOutput(\"numb\"),\n               actionButton(\"refresh\", \"Refresh\")\n             ), \n             \n             mainPanel (        fluidRow(splitLayout(cellWidths = c(\"50%\", \"50%\"), \n                                                      uiOutput(\"myImage2\"), \n                                                      plotOutput(\"barplot\", height = 500, width=450)\n             ))\n           )      \n           \n  )\n  \n  )  \n  \n  \n)\n\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n   \n  observeEvent(input$myFile, {\n    inFile <- input$myFile\n    if (is.null(inFile))\n      return()\n    \n    do.call(file.remove, list(setdiff(list.files(\"www\", full.names = TRUE), \"www/style.css\")))\n    file.copy(inFile$datapath, file.path(\"www/orig.jpg\") )\n    \n    output$heigh <- renderUI({\n      \n      sliderInput(\"height\", \"Select height in px\", min=0, max=1000, value=500) \n      \n    })\n    \n    output$myImage <- renderUI({\n      \n      img(src = \"orig.jpg\", width = as.integer(input$height))\n      \n    })\n    \n  })\n \n\nobserveEvent(input$refresh, {\n  \n  output$myImage <- renderUI({\n    \n    img(src = \"orig.jpg\", width = as.integer(input$height))\n    \n  })\n})\n\n  observeEvent(input$Black, {\n    \n    output$R.col <- renderUI({\n      \n      sliderInput(\"R\", \"Please select the filter for the red colour\", min=0, max=1, value=0.33)\n      \n    })\n    \n    output$G.col <- renderUI({\n      \n      sliderInput(\"G\", \"Please select the filter for the green colour\", min=0, max=1, value=0.33)\n      \n    })\n    \n    output$B.col <- renderUI({\n      \n      sliderInput(\"B\", \"Please select the filter for the blue colour\", min=0, max=1, value=0.33)\n      \n    })\n    \n    output$plot.black <- renderUI({\n      \n      p <- readJPEG(\"www/orig.jpg\")\n      \n      # Making the photo black and white ----------------------------------------\n      \n      ## We will use the luminosity algorithm \n      ## r * R + g * G + b * B\n      \n      greyscale <- input$R * p[ , , 1] + input$G *  p[ , , 2] + input$B * p[, , 3] \n\n      writeJPEG(greyscale, target = \"www/bw.jpg\")\n      \n      img(src = \"bw.jpg\", width = as.integer(input$height))  \n      \n    })\n    \n  })\n  \n  # Decomposition of colours ------------------------------------------------\n  \n  observeEvent(input$myFile2, {\n    inFile <- input$myFile2\n    if (is.null(inFile))\n      return()\n    \n    do.call(file.remove, list(setdiff(list.files(\"www\", full.names = TRUE), \"www/style.css\")))\n    file.copy(inFile$datapath, file.path(\"www/orig.jpg\") )\n    \n    output$heigh2 <- renderUI({\n      \n      sliderInput(\"height2\", \"Select height in px\", min=0, max=1000, value=600) \n      \n    })\n    \n    output$myImage2 <- renderUI({\n      \n      img(src = \"orig.jpg\", width = as.integer(input$height2))\n      \n    })\n    \n  })\n  \n  observe({\n    output$myImage2 <- renderUI({\n      \n      img(src = \"orig.jpg\", width = as.integer(input$height2))\n      \n    })\n  })\n  \n  observeEvent(input$refresh, {\n    \n    output$myImage2 <- renderUI({\n      \n      img(src = \"orig.jpg\", width = as.integer(input$height))\n      \n    })\n  })\n  \n  \n  observeEvent(input$Decomposition, {\n    \n    output$numb <- renderUI({\n      \n      sliderInput(\"numb.cols\", \"Please select the number of main colours\", min=0, max=30, value=10)\n      \n    })\n    \n    output$barplot <- renderPlot({\n      \n      p <- readJPEG(\"www/orig.jpg\")\n      set.seed(43)\n      \n      pp <- cbind(as.vector(unlist(p[ , , 1])), as.vector(unlist(p[ , , 2])), as.vector(unlist(p[ , , 3]))) %>% as.data.frame\n      names(pp) <- c(\"R\", \"G\", \"B\")\n      \n      kk <- kmeans(pp, centers=input$numb.cols)\n      pp$cluster <- kk$cluster \n      \n      pp <- ddply(pp, ~cluster, function(xframe){\n        \n        xframe <<- xframe\n        \n        xframe$mean.R <- mean(xframe$R)\n        xframe$mean.G <- mean(xframe$G)\n        xframe$mean.B <- mean(xframe$B)\n        \n        xframe$col.name <- rgb(mean(xframe$R), mean(xframe$G), mean(xframe$B))\n        \n        return(xframe)\n        \n      })\n      \n      pp <- arrange(pp, cluster)\n      \n      describtive.data <- ddply(pp, ~cluster, function(xframe){\n        \n        xframe <<- xframe\n        \n        xframe$length <- dim(xframe)[1]\n        \n        return(xframe[nrow(xframe), c(\"col.name\", \"length\")])\n        \n      })\n      \n      describtive.data <- arrange(describtive.data, length)\n      \n      par(mai=c(1,2,1,1))\n     \n      barplot(describtive.data$length, col = describtive.data$col.name,\n              names.arg = describtive.data$col.name, \n              horiz = T, las=1,  xaxt='n', main=\"Decomposition of colours\")\n      \n    })\n    \n  })\n  \n}\n\n\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n",
    "created" : 1500926215476.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2794670433",
    "id" : "1CF671AE",
    "lastKnownWriteTime" : 1500927417,
    "last_content_update" : 1500927417480,
    "path" : "C:/Users/Eligijus/Desktop/Shiny apps/Shiny colours/shiny-colours/app.R",
    "project_path" : "app.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}