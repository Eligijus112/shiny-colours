{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(imager)\nlibrary(jpeg)\nlibrary(shinyRGL)\n\n# UI part -----------------------------------------------------------------\n\nui <- navbarPage(title=\"Photo tool\",\n \n# ------------ |--- Documentation  ----------\n                 \ntabPanel(\"Documentation\",\n         \n         tags$head(\n           tags$link(rel = \"stylesheet\", type = \"text/css\", href = \"style.css\")\n         ),\n         \n         tags$iframe(style=\"height:600px; width:100%\", src=\"doc/documentation.pdf\"),\n         \n         hr(),\n         tags$div(\n           includeHTML(\"footer.html\")\n         )),\n\n# ------------ |--- Removing colours  ----------\n                 \n  tabPanel(\"Decolorize\",\n           \n           tags$head(\n             tags$link(rel = \"stylesheet\", type = \"text/css\", href = \"style.css\")\n           ),\n                       \n   sidebarLayout(\n      sidebarPanel(\n         fileInput(\"myFile\",\n                     \"Please upload your beautiful photo\", accept = c('image/png', 'image/jpeg')),\n         uiOutput(\"heigh\"),\n         actionButton(\"Black\", \"Make picture black and white\"),\n         uiOutput(\"R.col\"),\n         uiOutput(\"G.col\"),\n         uiOutput(\"B.col\")\n      ),\n      \n      mainPanel(\n        fluidRow( splitLayout(cellWidths = c(\"50%\", \"50%\"), \n        uiOutput(\"myImage\"), \n        uiOutput(\"plot.black\")\n        )\n      ))\n   ), \n   hr(),\n   tags$div(\n       includeHTML(\"footer.html\")\n   )\n  ),\n  \n# ------------ |--- Decomposition of colours  ----------\n\n  tabPanel(\"Decomposition of colours\", \n           \n           sidebarLayout(\n             sidebarPanel(\n               fileInput(\"myFile2\",\n                         \"Please upload your beautiful photo\", accept = c('image/png', 'image/jpeg')),\n               uiOutput(\"heigh2\"),\n               \n               actionButton(\"Decomposition\", \"Decompose the colours\"),\n               uiOutput(\"numb\")\n             ), \n             \n             mainPanel (fluidRow(splitLayout(cellWidths = c(\"50%\", \"50%\"), \n                                                      uiOutput(\"myImage2\"), \n                                                      plotOutput(\"barplot\", height = 500, width=450)\n             ))\n           )\n           \n  ),\n  hr(),\n  tags$div(\n    includeHTML(\"footer.html\")\n  )\n  ),\n  \n# ------------ |--- Intensify colours  ----------\n\ntabPanel(\"Intensify colours\", \n         sidebarLayout(\n           sidebarPanel(\n             fileInput(\"myFile3\",\n                       \"Please upload your beautiful photo\", accept = c('image/png', 'image/jpeg')),\n             uiOutput(\"heigh3\"),\n             actionButton(\"intense\", \"Intensify colours\"),\n             uiOutput(\"R.liambda\"),\n             uiOutput(\"G.liambda\"),\n             uiOutput(\"B.liambda\")\n           ),\n           \n           mainPanel (fluidRow(splitLayout(cellWidths = c(\"50%\", \"50%\"), \n                                           # tableOutput(\"text\"),\n                                           # tags$head(tags$style(\"#text {background-color: red; }\", media=\"screen\", type=\"text/css\")),\n                                           uiOutput(\"myImage3\"),\n                                           uiOutput(\"plot.intense\")\n                                           \n           ))\n           ) \n             \n         ),\n         hr(),\n         tags$div(\n           includeHTML(\"footer.html\")\n         )  \n)\n\n)\n\n\n# Server part -------------------------------------------------------------\n\nserver <- function(input, output) {\n   \n# ------------ |--- Decolorize photo (server)  ----------\n  \n  observeEvent(input$myFile, {\n    inFile <- input$myFile\n    if (is.null(inFile))\n      return()\n    \n    do.call(file.remove, list(setdiff(list.files(\"www\", full.names = TRUE), \"www/style.css\")))\n    file.copy(inFile$datapath, file.path(\"www/orig.jpg\") )\n    \n    output$heigh <- renderUI({\n      \n      sliderInput(\"height\", \"Select size in px\", min=0, max=1000, value=500) \n      \n    })\n    \n    output$myImage <- renderUI({\n      \n      img(src = \"orig.jpg\", width = as.integer(input$height))\n      \n    })\n    \n  })\n \n\nobserveEvent(input$refresh, {\n  \n  output$myImage <- renderUI({\n    \n    img(src = \"orig.jpg\", width = as.integer(input$height))\n    \n  })\n})\n\n  observeEvent(input$Black, {\n    \n    output$R.col <- renderUI({\n      \n      sliderInput(\"R\", \"Please select the filter for the red colour\", min=0, max=1, value=0.33)\n      \n    })\n    \n    output$G.col <- renderUI({\n      \n      sliderInput(\"G\", \"Please select the filter for the green colour\", min=0, max=1, value=0.33)\n      \n    })\n    \n    output$B.col <- renderUI({\n      \n      sliderInput(\"B\", \"Please select the filter for the blue colour\", min=0, max=1, value=0.33)\n      \n    })\n    \n    output$plot.black <- renderUI({\n      \n      p <- readJPEG(\"www/orig.jpg\")\n      \n      greyscale <- input$R * p[ , , 1] + input$G *  p[ , , 2] + input$B * p[, , 3] \n\n      writeJPEG(greyscale, target = \"www/bw.jpg\")\n      \n      img(src = \"bw.jpg\", width = as.integer(input$height))  \n      \n    })\n    \n  })\n  \n # ------------ |--- Decomposition of colours (server)  ----------\n \n  observeEvent(input$myFile2, {\n    inFile <- input$myFile2\n    if (is.null(inFile))\n      return()\n \n    do.call(file.remove, list(setdiff(list.files(\"www\", full.names = TRUE), c(\"www/style.css\", \"www/default.jpg\"))))\n    file.copy(inFile$datapath, file.path(\"www/orig.jpg\") )\n    \n    output$heigh2 <- renderUI({\n      \n      sliderInput(\"height2\", \"Select size in px\", min=0, max=1000, value=500) \n      \n    })\n    \n    output$myImage2 <- renderUI({\n      \n      img(src = \"orig.jpg\", width = as.integer(input$height2))\n      \n    })\n    \n  })\n  \n  observeEvent(input$Decomposition, {\n    \n    output$numb <- renderUI({\n      \n      sliderInput(\"numb.cols\", \"Please select the number of main colours\", min=0, max=30, value=10)\n      \n    })\n    \n    output$barplot <- renderPlot({\n      \n      p <- readJPEG(\"www/orig.jpg\")\n      set.seed(43)\n      \n      pp <- cbind(as.vector(unlist(p[ , , 1])), as.vector(unlist(p[ , , 2])), as.vector(unlist(p[ , , 3]))) %>% as.data.frame\n      names(pp) <- c(\"R\", \"G\", \"B\")\n      \n      kk <- kmeans(pp, centers=input$numb.cols)\n      pp$cluster <- kk$cluster \n      \n      pp <- ddply(pp, ~cluster, function(xframe){\n        \n        xframe <<- xframe\n        \n        xframe$mean.R <- mean(xframe$R)\n        xframe$mean.G <- mean(xframe$G)\n        xframe$mean.B <- mean(xframe$B)\n        \n        xframe$col.name <- rgb(mean(xframe$R), mean(xframe$G), mean(xframe$B))\n        \n        return(xframe)\n        \n      })\n      \n      pp <- arrange(pp, cluster)\n      \n      describtive.data <- ddply(pp, ~cluster, function(xframe){\n        \n        xframe <<- xframe\n        \n        xframe$length <- dim(xframe)[1]\n        \n        return(xframe[nrow(xframe), c(\"col.name\", \"length\")])\n        \n      })\n      \n      describtive.data <- arrange(describtive.data, length)\n      \n      par(mai=c(1,2,1,1))\n     \n      barplot(describtive.data$length, col = describtive.data$col.name,\n              names.arg = describtive.data$col.name, \n              horiz = T, las=1,  xaxt='n', main=\"Decomposition of colours\")\n      \n    })\n    \n  })\n  \n  # ------------ |--- Intensify colours  ----------\n  \n  observeEvent(input$myFile3, {\n    inFile <- input$myFile3\n    if (is.null(inFile))\n      return()\n    \n    do.call(file.remove, list(setdiff(list.files(\"www\", full.names = TRUE), c(\"www/style.css\", \"www/default.jpg\"))))\n    file.copy(inFile$datapath, file.path(\"www/orig.jpg\") )\n    \n    output$heigh3 <- renderUI({\n      \n      sliderInput(\"height3\", \"Select size in px\", min=0, max=1000, value=500) \n      \n    })\n    \n    output$myImage3 <- renderUI({\n      \n      img(src = \"orig.jpg\", width = as.integer(input$height3))\n      \n    })\n    \n  })\n  \n  pic <- reactive({ \n    \n    readJPEG(\"www/orig.jpg\")\n    \n    })\n  \n  observeEvent(input$intense, {\n    \n    output$R.liambda <- renderUI({\n      \n      sliderInput(\"R.l\", \"Please select the constant for red\", min=0, max=1, value=0)\n      \n    })\n    \n    output$G.liambda <- renderUI({\n      \n      sliderInput(\"G.l\", \"Please select the constant for green\", min=0, max=1, value=0)\n      \n    })\n    \n    output$B.liambda <- renderUI({\n      \n      sliderInput(\"B.l\", \"Please select the constant for blue\", min=0, max=1, value=0)\n      \n    })\n    \n    output$plot.intense <- renderUI({\n      \n      p <- readJPEG(\"www/orig.jpg\")\n      \n      p[ , , 1] <- as.matrix(p[ , , 1] * (1 - input$R.l)) +  input$R.l\n      p[ , , 2] <- as.matrix(p[ , , 2] * (1 - input$G.l)) +  input$G.l\n      p[ , , 3] <- as.matrix(p[ , , 3] * (1 - input$B.l)) +  input$B.l\n      \n      writeJPEG(p, target = \"www/intense.jpg\")\n      \n      img(src = \"intense.jpg\", width = as.integer(input$height3))  \n      \n    })\n    \n  })\n\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n",
    "created" : 1500926215476.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "473186688",
    "id" : "1CF671AE",
    "lastKnownWriteTime" : 1501360877,
    "last_content_update" : 1501360877696,
    "path" : "C:/Users/Eligijus/Desktop/Shiny apps/Shiny colours/shiny-colours/app.R",
    "project_path" : "app.R",
    "properties" : {
        "docOutlineVisible" : "1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}